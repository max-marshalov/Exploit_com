from django.shortcuts import render
from django.shortcuts import redirect
from django.shortcuts import get_object_or_404
from django.http import HttpResponse
from .models import Article
from .models import Category
from .models import User
from django.views.generic import View
from .utils import ObjectDetailMixin
from django.views.generic.edit import CreateView
from .forms import SignUpForm
from django.urls import reverse_lazy
from .forms import SignInForm
from django.views.generic.edit import FormView
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.forms import AuthenticationForm
from django.http import HttpResponseRedirect
from django.contrib.auth import logout
from .forms import ArticleForm
from django.contrib.auth.mixins import LoginRequiredMixin

# Функция для установки сессионного ключа.
# По нему django будет определять, выполнил ли вход пользователь.
from django.contrib.auth import login

class RegisterFormView(FormView):
    form_class = UserCreationForm

    # Ссылка, на которую будет перенаправляться пользователь в случае успешной регистрации.
    # В данном случае указана ссылка на страницу входа для зарегистрированных пользователей.
    success_url = '/'

    # Шаблон, который будет использоваться при отображении представления.
    template_name = "mainPage/register.html"

    def form_valid(self, form):
        # Создаём пользователя, если данные в форму были введены корректно.
        form.save()

        # Вызываем метод базового класса
        return super(RegisterFormView, self).form_valid(form)

"""def posts_list(request):
    articles = Article.objects.all()
    return render(request, 'mainPage/mainPage.html', context={'arts':articles})
 """
 # Опять же, спасибо django за готовую форму аутентификации.

class LoginFormView(FormView):
    form_class = AuthenticationForm

    # Аналогично регистрации, только используем шаблон аутентификации.
    template_name = "mainPage/login.html"

    # В случае успеха перенаправим на главную.
    success_url = "/"

    def form_valid(self, form):
        # Получаем объект пользователя на основе введённых в форму данных.
        self.user = form.get_user()

        # Выполняем аутентификацию пользователя.
        login(self.request, self.user)
        return super(LoginFormView, self).form_valid(form)

class LogoutView(View):
    def get(self, request):
        # Выполняем выход для пользователя, запросившего данное представление.
        logout(request)

        # После чего, перенаправляем пользователя на главную страницу.
        return HttpResponseRedirect("/")

class ArticleDetail(View):
     def get(self, request, id):
          #article = Article.objects.get(id=id)
          article = get_object_or_404(Article, id=id)
          return render(request, 'mainPage/art_detail.html', context={'art':article})

class UsrCreateView(View):
     def get(self, request):
          form = SignUpForm()
          return render(request, 'mainPage/signup.html', context={'form':form})
     def post(self, request):
          bound_form = SignUpForm(request.POST)
          if bound_form.is_valid():
               new_user = bound_form.save()
               return redirect('index')
          return render(request, 'mainPage/signup.html', context={'form':bound_form})

class UsrLoginView(View):
     def get(self, request):
          form = SignInForm()
          return render(request, 'mainPage/signin.html', context={'form':form})
     def post(self, request):
          bound_form = SignInForm(request.POST)
          if not bound_form.is_valid():
               return redirect('index')
          return render(request, 'mainPage/signin.html', context={'form':bound_form})

class ArticleCreate(LoginRequiredMixin,CreateView):
     template_name = 'mainPage/add_article.html'
     form_class = ArticleForm
     success_url = '/'
     raise_exception = True
     def get_context_data(self, **kwargs):
          context = super().get_context_data(**kwargs)
          context['cats'] = Category.objects.all()
          return context 




def personal_area(request):
     nickname = request.user.username
     return render(request, 'mainpage/personal_area.html', context={'nick':nickname})

def by_cat(request, cat_id):
     article = Article.objects.filter(category=cat_id)
     categories = Category.objects.all()
     current_cat = get_object_or_404(Category, pk=cat_id)
     context = {'arts': article, 'cats' : categories, 'current_cat' : current_cat}
     return render(request, 'mainPage/mainPage.html', context)

def index(request):
     arts = Article.objects.all()
     cats = Category.objects.all()
     context = {'arts' : arts, 'cats' : cats}
     return render(request, 'mainPage/mainPage.html', context)

"""def article_detail(request, id):
     article = Article.objects.get(id=id)
     return render(request, 'mainPage/art_detail.html', context={'art':article})
"""